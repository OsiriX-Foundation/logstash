input {
    beats {
        port => "5044"
    }
}

filter {
   if [fields][docker_type] == "nginx" {
      if [fields][log_type] == "access" {
         if [agent][name] == "kheops_reverse_proxy" or [fields][docker_role] == "reverse_proxy" {
           grok {
             match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{USERNAME:[nginx][access][user_id]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]:float} (?:%{NUMBER:[nginx][access][upstream_connect_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_header_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_response_time]:float}|-) (?:%{NUMBER:[nginx][access][request_time]:float}|-) \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\" \"%{DATA:[nginx][access][http_x_forwarded_for]}\""] }
             remove_field => "message"
           }
         } else if [agent][name] == "kheops_pep" or [fields][docker_role] == "pep" {
           grok {
             match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{USERNAME:[nginx][access][user_id]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]:float} (?:%{NUMBER:[nginx][access][upstream_connect_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_header_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_response_time]:float}|-) (?:%{NUMBER:[nginx][access][request_time]:float}|-) \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\" \"%{DATA:[nginx][access][http_x_forwarded_for]}\" %{NOTSPACE:[nginx][access][authorized_party]} %{NOTSPACE:[nginx][access][capability_token_id]} %{NOTSPACE:[nginx][access][acting_party]}"] }
             remove_field => "message"
           }
         }

         urldecode {
           field => "[nginx][access][url]"
         }

         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         mutate {
           add_field => { "[nginx][log_type]" => "access" }
         }
         mutate {
           gsub => [ "[nginx][access][url]", "\/link\/[a-zA-Z0-9.+=_-]+\/", "/link/**************/"]
         }
         date {
           match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
           remove_field => "[nginx][access][time]"
         }
         useragent {
           source => "[nginx][access][agent]"
           target => "[nginx][access][user_agent]"
           remove_field => "[nginx][access][agent]"
         }
         if [agent][name] == "kheops_reverse_proxy" or [fields][docker_role] == "reverse_proxy" {
           geoip {
             source => "[nginx][access][remote_ip]"
           }
         }

         if [agent][name] == "kheops_pep" or [fields][docker_role] == "pep" {

           mutate { add_field => { "api" => true }}

           mutate {
             copy => { "[nginx][access][url]" => "splited_url" }
           }

           mutate {
             split => ["splited_url", "?"]
           }

           mutate {
             copy => { "[splited_url][0]" => "url_tmp" }
           }

           mutate { 
             copy => { "[splited_url][0]" => "generic_url" }
             copy => { "[splited_url][1]" => "query_param_tmp" }
             copy => { "query_param_tmp" => "all_query_param" }
           }

           mutate {
             split => ["all_query_param", "&"]
           }

           kv {
             source => "query_param_tmp"
             target => "query_param"
             field_split => "&"
             remove_field => "query_param_tmp"
           }

           mutate { 
             split => ["url_tmp", "/"] 
           }

           mutate {
             copy => { "[url_tmp][2]" => "[path_param][study]" }
             copy => { "[url_tmp][4]" => "[path_param][series]" }
             copy => { "[url_tmp][6]" => "[path_param][instance]" }
             copy => { "[url_tmp][8]" => "[path_param][fram]" }
             remove_field => "url_tmp"
           }

           mutate {
             gsub => ["generic_url", "([0-9]+[.])*[0-9]+", "***"]
           }

         } else if [agent][name] == "kheops_reverse_proxy" or [fields][docker_role] == "reverse_proxy" {

           mutate {
             copy => { "[nginx][access][url]" => "splited_url" }
           }

           mutate {
             split => ["splited_url", "?"]
           }

           mutate {
             copy => { "[splited_url][0]" => "url_tmp" }
           }

           mutate {
             copy => { "[splited_url][0]" => "generic_url" }
             copy => { "[splited_url][1]" => "query_param_tmp" }
             copy => { "query_param_tmp" => "all_query_param" }
           }

           mutate {
             gsub => ["generic_url", "\/studies\/([0-9]+[.])*[0-9]+", "/studies/***"]
             gsub => ["generic_url", "\/series\/([0-9]+[.])*[0-9]+", "/series/***"]
             gsub => ["generic_url", "\/instances\/([0-9]+[.])*[0-9]+", "/instances/***"]
             gsub => ["generic_url", "\/albums\/[0-9a-zA-Z]{10}", "/albums/***"]
             gsub => ["generic_url", "\/capabilities\/[0-9a-zA-Z]{10}", "/capabilities/***"]
             gsub => ["generic_url", "\/reportproviders\/[0-9a-zA-Z]{22}", "/reportproviders/***"]
             gsub => ["generic_url", "\/users\/[0-9a-zA-Z@_.-]+", "/users/***"]
           }

           mutate {
             split => ["url_tmp", "/"]
           }

           if [url_tmp][1] == "api" {
              mutate { add_field => { "api" => true }}
           } else {
              mutate { add_field => { "api" => false }}
           }

           if [url_tmp][2] == "albums" {
             mutate { copy => { "[url_tmp][3]" => "[path_param][album_id]" } }        
           } else if [url_tmp][4] == "albums" {
             mutate { copy => { "[url_tmp][5]" => "[path_param][album_id]" } }
           } else if [url_tmp][6] == "albums" {
             mutate { copy => { "[url_tmp][7]" => "[path_param][album_id]" } }
           }


           mutate { remove_field => "url_tmp" }

           kv {
             source => "query_param_tmp"
             target => "query_param"
             field_split => "&"
             remove_field => "query_param_tmp"
           }

         } #end if kheops_reverse_proxy

      }

      if [fields][log_type] == "error" {
         grok {
           match => { "message" => ["%{DATA:[time]} \[%{DATA:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}"] } 
         }
         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         mutate {
           add_field => { "[nginx][log_type]" => "error" }
         }
         date {
           match => [ "[time]", "yyyy/MM/dd HH:mm:ss" ]
           timezone => "Europe/Zurich"
           remove_field => "time"
         }
      }
   } 

   if "beats_input_codec_plain_applied" in [tags] {
     mutate {
       remove_tag => ["beats_input_codec_plain_applied"]
     }
   }
   

   #metricbeat docker********************************************************

   if [event][module] == "docker" {
      mutate { copy => { "[container][image][name]" => "[container][image][full_name]" } }
      mutate { copy => { "[container][image][name]" => "container_image_name_tmp" } }
      mutate { split => ["container_image_name_tmp", ":"] }
      mutate { copy => { "[container_image_name_tmp][1]" => "[container][image][tag]" } }
      mutate { copy => { "[container_image_name_tmp][0]" => "[container][image][name]" } }

      mutate { remove_field => "container_image_name_tmp"  }
   }

   #metricbeat system********************************************************
   #metricbeat kheops********************************************************
   if [event][dataset] == "http.kheopsmetrics" {
   }
   #authorization logs*******************************************************
   if [fields][docker_type] == "tomcat" {
      if [fields][log_type] == "catalina" {
         grok {
           match => { "message" => ["%{DATA:[catalina][log][time][0]} %{DATA:[catalina][log][time][1]} %{DATA:[catalina][log][level]} \[%{DATA:[catalina][log][thread]}\] %{DATA:[catalina][log][source]} %{GREEDYDATA:[catalina][log][message]}"] }
           remove_field => "message"
         }

         mutate {
           merge => { "[catalina][log][time][0]" => "[catalina][log][time][1]"}
         }
         mutate {
           join => { "[catalina][log][time][0]" => " " }
         }
         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         date {
           match => [ "[catalina][log][time][0]", "dd-MMM-YYYY HH:mm:ss.SSS" ]
           remove_field => [ "[catalina][log][time][0]", "[catalina][log][time][1]" ]
           timezone => "UTC"
         }
         if [catalina][log][level] == "KHEOPS" {
           kv {
             source => "[catalina][log][message]"
             field_split => " "
             target => "kheops"
             remove_field => "[catalina][log][message]"
           }
           if [kheops][sourceIP] {
            geoip {
               source => "[kheops][sourceIP]"
             }
           }
         }
      } else if [fields][log_type] == "localhost_access_log" {
         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         grok  {
           match => { "message" => ["%{COMMONAPACHELOG}"] }
           remove_field => "message"
         }
         mutate {
           copy => { "clientip" => "[localhost_access_log][clientip]" }
           copy => { "ident" => "[localhost_access_log][ident]" }
           copy => { "auth" => "[localhost_access_log][auth]" }
           copy => { "verb" => "[localhost_access_log][verb]" }
           copy => { "request" => "[localhost_access_log][request]" }
           copy => { "httpversion" => "[localhost_access_log][httpversion]" }
           copy => { "response" => "[localhost_access_log][response]" }
           copy => { "bytes" => "[localhost_access_log][bytes]" }
           remove_field => [ "clientip", "ident", "auth", "verb", "request", "httpversion", "response", "bytes" ]
           convert => { "[localhost_access_log][response]" => "integer" }
         }
         mutate {
           convert => { "[localhost_access_log][response]" => "integer" }
         }
      }

   }
}

output {
     if [event][module] == "docker" {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "docker-%{+YYYY.MM.dd}"
         }
     } else if [event][module] == "system" {
         if [agent][type] == "metricbeat" {
            elasticsearch {
               hosts => [ "elasticsearch:9200" ]
               index => "system-metrics-%{+YYYY.MM.dd}"
            }
         }
     } else if [agent][name] == "kheops_reverse_proxy" or [fields][docker_role] == "reverse_proxy" {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "kheopsnginx-%{+YYYY.MM.dd}"
         }
     } else if [agent][name] == "kheops_pep" or [fields][docker_role] == "pep" {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "kheopsnginx-%{+YYYY.MM.dd}"
         }
     } else if [fields][docker_type] == "tomcat" {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "kheopsauthorization-%{+YYYY.MM.dd}"
         }
     } else if [event][dataset] == "http.kheopsmetrics" {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "kheopsmetrics-%{+YYYY.MM}"
         }
     } else {
         elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            index => "trash-%{+YYY.MM.dd}"
         }
     }
}
